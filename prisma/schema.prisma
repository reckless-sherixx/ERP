generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InvoiceStatus {
  PAID
  PENDING
}

enum OrderStatus {
  PENDING
  IN_PRODUCTION
  COMPLETED
  CANCELED
}

enum Role {
  SYSTEM_ADMIN
  ADMIN
  FACTORY_MANAGER
  INVENTORY_MANAGER
  SALES
  DESIGN
  ACCOUNTING
  PRODUCTION_STAFF
  CUSTOMER
}

enum ItemCategory {
  WOOD
  VENEERS
  HARDWARE
  FINISHES
  TOOLS
}

enum InventoryStockStatus {
  LOW_STOCK
  IN_STOCK
  OUT_OF_STOCK
}

enum ProductionStatus {
  ASSEMBLY
  CUTTING
  FINISHING
}

enum DesignStatus {
  APPROVED
  REVISION
  PENDING
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  address       String?
  emailVerified DateTime?
  image         String?
  password      String? // optional for social logins
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  attachments   Attachment[]
  invoices      Invoice[]
  Order         Order[]
  InventoryItem InventoryItem[]
  Assignee      Assignee[]
  Notification  Notification[]
}

model Order {
  id                   String           @id @default(uuid())
  orderNumber          String           @unique
  customerName         String
  customerEmail        String?          @unique
  customerPhone        String
  customerAddress      String
  status               OrderStatus      @default(PENDING)
  productId            String?
  itemQuantity         Int
  itemRate             Int
  itemDescription      String
  totalPrice           Int
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  estimatedDelivery    DateTime?
  note                 String?
  attachment           String?
  isApprovedByCustomer Boolean?         @default(false)
  isApprovedByAdmin    Boolean?         @default(false)
  isAssigned           Boolean?         @default(false)
  productionStatus     ProductionStatus @default(CUTTING)

  user     User?      @relation(fields: [userId], references: [id])
  userId   String?
  Assignee Assignee[]
}

model Assignee {
  id         String       @id @default(uuid())
  orderId    String
  userId     String
  status     DesignStatus @default(PENDING)
  assignedAt DateTime     @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invoice {
  id String @id @default(uuid())

  invoiceName   String
  total         Int
  status        InvoiceStatus
  date          DateTime
  dueDate       Int
  fromName      String
  fromEmail     String
  fromAddress   String
  clientName    String
  clientEmail   String
  clientAddress String
  currency      String
  invoiceNumber Int
  note          String?

  invoiceItemDescription String
  invoiceItemQuantity    Int
  invoiceItemRate        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Attachment {
  id         String   @id @default(uuid())
  fileName   String
  fileType   String
  uploadedAt DateTime @default(now())
  category   String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model InventoryItem {
  id           String               @id @default(uuid())
  materialId   String
  materialName String
  category     ItemCategory
  unit         String
  currentStock Int
  reorderPoint Int
  supplier     String
  stockStatus  InventoryStockStatus @default(IN_STOCK)
  user         User?                @relation(fields: [userId], references: [id])
  userId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String   @id @default(cuid())
  templateId String
  channels   String
  subject    String
  content    Json
  status     String
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())

  @@index([userId])
}

model DesignRevision {
  id        String   @id @default(uuid())
  version   Int
  comment   String?
  fileUrl   String?
  createdAt DateTime @default(now())
}

model WorkStation {
  id            String   @id @default(uuid())
  name          String
  currentLoad   Int
  assignedTasks Int
  nextAvailable DateTime
}

model TaskAssignment {
  id            String   @id @default(uuid())
  orderId       String
  workstationId String
  assignedAt    DateTime @default(now())
  status        String
}
